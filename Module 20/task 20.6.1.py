# Ваня работает middle-разработчиком на Python в IT-компании. Один кандидат на junior-разработчика
# прислал ему код тестового задания. Задание состояло в следующем: есть словарь из трёх студентов. Необходимо:
# 1.	Вывести на экран список пар «ID студента — возраст».
# 2.	Написать функцию, которая принимает в качестве аргумента словарь и возвращает два значения:
# полный список интересов всех студентов и общую длину всех фамилий студентов.
# 3.	Далее в основном коде вызывается функция, значения присваиваются отдельным переменным и выводятся на экран.
# Ваня — очень придирчивый программист, и после просмотра кода он понял, что этого кандидата на работу не возьмёт,
# даже несмотря на то, что он выдаёт верный результат. Вот сам код кандидата:

students = {
    1: {
        'name': 'Bob',
        'surname': 'Vazovski',
        'age': 23,
        'interests': ['biology, swimming']
    },
    2: {
        'name': 'Rob',
        'surname': 'Stepanov',
        'age': 24,
        'interests': ['math', 'computer games', 'running']
    },
    3: {
        'name': 'Alexander',
        'surname': 'Krug',
        'age': 22,
        'interests': ['languages', 'health food']
    }
}


def f(dict):
    lst_interests = [dict[i]['interests'] for i in dict]
    lst_sum_name = [dict[x]['surname'] for x in dict]
    str_sum_name = ''.join(lst_sum_name)
    return lst_interests, len(str_sum_name)



for i_id, i_name in students.items():
    print(f'ID - {i_id} --- student', i_name['age'])



my_lst = f(students)[0]
l = f(students)[1]
print(my_lst, l)

# Перепишите этот код так, чтобы он был максимально pythonic и Ваня мало к чему мог придраться
# (ну только если очень захочется). Убедитесь в том, что программа работает всё так же верно.
# Различные проверки на существование записей в словаре не обязательны, но приветствуются :)
